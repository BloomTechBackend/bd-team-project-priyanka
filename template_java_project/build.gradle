import org.gradle.api.Project
plugins {
    id 'java'
    //added by me
    id 'com.adarshr.test-logger' version '3.0.0'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'net.ltgt.apt-idea' version "0.15"
}

repositories {
    mavenCentral()
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

// for use with the Gradle Java Plugin
sourceSets {
    main {
        java {
            srcDirs = ['src/']
        }
        resources {
            srcDirs = ['src/resources/']
        }
    }
    test {
        java {
            srcDirs = ['tst/']
        }
        resources {
            srcDirs = ['tst/resources/']
        }
    }
}

dependencies {
    implementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testImplementation project(path: ':')
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'

    implementation 'com.google.guava:guava:30.1.1-jre'

    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.10.0'
    // added by me
    implementation files("$rootDir/LibrariesAndUtilities/ATAResources.jar")
    implementation project('LibrariesAndUtilities:LessonPlanResources')
    implementation project('LibrariesAndUtilities:ATACurriculumTestInfrastructure')
    implementation 'com.google.code.gson:gson:2.8.8'
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    // https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.2'
// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-jackson
//    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-gson', version: '0.2'

//    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
//    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
//    runtimeOnly 'io.jsonwebtoken:jjwt-gson:0.12.5'

    // https://mvnrepository.com/artifact/com.nimbusds/nimbus-jose-jwt
//    implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '2.10.1'

    //end

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'
    implementation group: 'com.google.dagger', name: 'dagger', version: '2.15'

    implementation "com.google.dagger:dagger:2.15"
    annotationProcessor"com.google.dagger:dagger-compiler:2.15"

    // https://mvnrepository.com/artifact/org.testng/testng
    implementation group: 'org.testng', name: 'testng', version: '6.14.3'


    // Added for AWS Lambda Functions
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.1000')
    implementation 'com.amazonaws:aws-java-sdk-s3'
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.1'
    implementation 'com.amazonaws:aws-lambda-java-events:2.2.9'
    runtimeOnly 'com.amazonaws:aws-lambda-java-log4j2:1.2.0'

    // Added for using log4j usage
    //added by me
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'
//    implementation "jakarta.xml.bind:jakarta.xml.bind-api:4.0.2"
    //implementation "org.glassfish.jaxb:jaxb-runtime:2.3.2"
    // https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api
//    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.11'



}
//added by me

test {
    useJUnitPlatform()

    testlogger {
        theme 'plain'
        logLevel 'quiet'
    }

    testLogging {
        // set options for log level DEBUG and INFO
        debug {
//            events TestLogEvent.STARTED,
//                    TestLogEvent.FAILED,
//                    TestLogEvent.PASSED,
//                    TestLogEvent.SKIPPED,
//                    TestLogEvent.STANDARD_ERROR,
//                    TestLogEvent.STANDARD_OUT
//            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))

                def scoringPercentage = 10 - result.failedTestCount
                scoringPercentage = scoringPercentage / 10
                println("Exit Result for Scoring: " + scoringPercentage)
            }
        }
    }
}
project.configurations.implementation.setCanBeResolved(true)
jar {
    manifest {
        attributes(
                "Main-Class": "",
                "Class-Path": configurations.implementation.collect { it.name }.join(' ')
        )
    }
    dependsOn('dependencies')
}
//end

task buildZip(type: Zip) {
    from compileJava
    from processResources
    into('./lib') {
        from configurations.runtimeClasspath
    }
}